// @charset 'UTF-8';
// /// Creates a series of guide lines using the `background-image` property on a
// /// grid container to visualise the columns and gutters of the grid.
// ///
// /// @group features
// ///
// /// @name Grid visual
// ///
// /// @argument {color} $color
// ///   The color of the guide lines created.
// ///
// /// @argument {map} $grid [$neat-grid]
// ///   The grid used to determine the guides
// ///
// /// @example scss
// ///   .element {
// ///     @include grid-visual;
// ///   }
// ///
// /// @example css
// ///   .element {
// ///     background-image: repeating-linear-gradient( … ) ;
// ///   }

// @mixin grid-visual($color: null, $grid: $grid) {
// 	@if not $color {
// 		$color: #ededed;
// 	}

// 	$_grid-columns: map-get($grid, columns);
// 	$_grid-gutter: map-get($grid, gutters);
// 	$_grid-visual-column: '#{_column-width($grid, 1)} + #{$_grid-gutter}px';
// 	$_grid-visual:
// 		transparent,
// 		transparent $_grid-gutter + px,
// 		$color $_grid-gutter + px,
// 		$color calc(#{$_grid-visual-column}),
// 	;

// 	background-image: repeating-linear-gradient(to right, $_grid-visual);
// }

@charset 'UTF-8';
/// Creates a series of guide lines using the `background-image` property on a
/// grid container to visualise the columns and gutters of the grid.
///
/// @group features
///
/// @name Grid visual
///
/// @argument {color} $color
///   The color of the guide lines created.
///
/// @argument {map} $grid [$neat-grid]
///   The grid used to determine the guides
///
/// @example scss
///   .element {
///     @include grid-visual;
///   }
///
/// @example css
///   .element {
///     background-image: repeating-linear-gradient( … ) ;
///   }

// @mixin grid-visual($color: null, $grid: $grid) {

// 	@if not $color {
// 		$color: #ededed;
// 	}

// 	$_grid-columns: map-get($grid, columns);
// 	$_grid-gutter: map-get($grid, gutters);
// 	$_grid-visual-column: '#{_column-width($grid, 1)} + #{$_grid-gutter}px';
// 	$_grid-visual: transparent, transparent $_grid-gutter + px, $color $_grid-gutter + px, $color calc(#{$_grid-visual-column});

// 	background-image: repeating-linear-gradient(to right, $_grid-visual);

// }

@mixin grid-visual($color: null, $grid: $grid) {
	@if not $color {
		$color: #ededed;
	}

	$_grid-columns: _retrieve-setting($grid, columns);
	$_grid-gutter: _retrieve-setting($grid, gutter);
	$_grid-visual-column: '#{_column-width($grid, 1)} + #{$_grid-gutter}';
	$_grid-visual: transparent, transparent $_grid-gutter, $color $_grid-gutter, $color calc(#{$_grid-visual-column});

	background-image: repeating-linear-gradient(to right, $_grid-visual);
}

// @mixin grid-visual($color: null, $grid: $grid) {

// 	@if not $color {
// 		$color: #ededed;
// 	}

// 	$_grid-columns: map-get($grid, columns);
// 	$_grid-gutter: map-get($grid, gutters);
// 	$_grid-visual-object: () !default;
// 	$_grid-visual:
// 	$color,
// 	$color $_grid-gutter + px,
// 	transparent $_grid-gutter + px,
// 	;

// 	@for $i from 1 to $_grid-columns {
// 		$_grid-visual-local: (
// 			#{$i}: '#{_column-width($grid, $i)} + #{$_grid-gutter}px',
// 		);

// 		$_grid-visual-object: map-merge($_grid-visual-object, $_grid-visual-local);

// 	}

// 	@each $stop, $location in $_grid-visual-object {

// 		$_grid-visual-loop-list:
// 		transparent calc(#{$location}),
// 		$color calc(#{$location}),
// 		$color calc(#{$location} + #{$_grid-gutter}px),
// 		transparent calc(#{$location} + #{$_grid-gutter}px),
// 		;

// 		$_grid-visual: _append-grid-visual($_grid-visual, $_grid-visual-loop-list);

// 	}

// 	$_grid-visual-loop-list:
// 	transparent calc(100% - #{$_grid-gutter}px),
// 	$color calc(100% - #{$_grid-gutter}px),
// 	$color calc(100%),
// 	;

// 	$_grid-visual: _append-grid-visual($_grid-visual, $_grid-visual-loop-list);

// 	background-image: linear-gradient(to right, $_grid-visual);

// }
